/*------------------------------------*\
    $FORMS
\*------------------------------------*/

fieldset{
	border: 0;
	
	@include spacing(padding);
	
	& + fieldset{
		margin-bottom: 0;
	}
	
}

	.form__inputs:first-of-type{
		margin-bottom: 0;
	}
	
	.form__actions{
		margin-bottom: 0;
	}


legend{
	display: block;
	width: 100%;
	padding: 0;
	@include font-size($base-font-size * 1.25);
}

/**
 * Text Inputs and Form Control
 *
 * Instead of a `[type]` selector for each kind of form input, we just use a
 * class to target any/every one, e.g.:
 *a
   <input type=text class=text-input>
   <input type=email class=text-input>
   <input type=password class=text-input>
 *
 * For non-text based inputs such as <select>, <radio>, etc use .form-control
 * which allows you to add nice hover/focus effect to the text inputs if you 
 * choose
 *
 */
.text-input, textarea{
	&:hover{
		border-color: darken($base-ui-color, 25%)
	}
}

.text-input, .form-control{
	display: block;
	width: auto;
	
	/** 
	 * Make inputs at least the height of their button counterpart (base line-height + padding + border)
	 */
    height: $base-line-height + ($base-spacing-unit / 4) - 2px ;
	
    padding-top: $base-line-height / 6;
    padding-bottom: $base-line-height / 6;
	
	font-size: $base-font-size * 0.875;
	line-height: $base-line-height;
	
    background-image: none; // Reset unusual Firefox-on-Android default style; see https://github.com/necolas/normalize.css/issues/214
	border: 2px solid $base-ui-color;
	border-radius: $base-border-radius;
	
	
	@include half-spacing(padding-left);
	@include half-spacing(padding-right);
	
	&.disabled{
	    cursor: not-allowed;
	}
}



/**
 * Group sets of form fields in a list, e.g.:
 *
   <ul class=form-fields>
       <li>
           <label />
           <input />
       </li>
       <li>
           <label />
           <select />
       </li>
       <li>
           <label />
           <input />
       </li>
   </ul>
 *
 */
.form-fields{
    @extend .block-list;
}

    .form-fields > li{
        @extend %margin-bottom;
    }
    
    .form-fields > li:last-child{
        margin-bottom:0;
    }



/**
 * Labels
 *
 * Define a `.label` class as well as a `label` element. This means we can apply
 * label-like styling to meta-labels for groups of options where a `label`
 * element is not suitable, e.g.:
 *
   <li>
      <span class=label>Select an option below:</span>
      <ul class="multi-list  four-cols">
          <li>
              <input /> <label />
          </li>
          <li>
              <input /> <label />
          </li>
          <li>
              <input /> <label />
          </li>
          <li>
              <input /> <label />
          </li>
      </ul>
  </li>
 *
 */
label,
.label{
    display:block;
	@include rem-calc(margin-bottom, 6px);
}

    /**
     * Extra help text in `label`s, e.g.:
     *
       <label>Card number <small class=additional>No spaces</small></label>
     *
     */
    .additional{
        display:block;
        font-weight: normal;
		font-style: italic;
    }
	
	input + .additional{
		@include rem-calc(margin-top, 6px);
	}

	.additional, .check-list > li{
		@include rem-calc(margin-bottom, 12px);
	}


/*
 * Groups of checkboxes and radios, e.g.:
 *
   <li>
       <ul class=check-list>
           <li>
               <input /> <label />
           </li>
           <li>
               <input /> <label />
           </li>
       </ul>
   </li>
 *
 */
.check-list{
    @extend .block-list;
}

    /*
     * Labels in check-lists
     */
    .check-label,
    .check-list label,
    .check-list .label{
        display:inline-block;
    }



/**
 * Spoken forms are for forms that read like spoken word, e.g.:
 *
   <li class=spoken-form>
       Hello, my <label for=spoken-name>name</label> is
       <input type=text class=text-input id=spoken-name>. My home
       <label for=country>country</label> is
       <select id=country>
           <option>UK</option>
           <option>US</option>
           <option>Other</option>
       </select>
   </li>
 *
 */
.spoken-form{
    
    input, select, label{
        display:inline-block;
        //font:inherit;
    }
}



/**
 * Extra help text displayed after a field when that field is in focus, e.g.:
 *
   <label for=email>Email:</label>
   <input type=email class=text-input id=email>
   <small class=extra-help>.edu emails only</small>
 *
 * We leave the help text in the document flow and merely set it to
 * `visibility:hidden;`. This means that it wonâ€™t interfere with anything once
 * it reappears.
 *
 */
/*small*/.form-help{
    display: block;
    visibility:hidden;
	max-height: 0;
}

.text-input:active + .form-help,
.text-input:focus + .form-help{
    visibility:visible;
	max-height: inherit;
	
	@include rem(margin-top, 6px);
}


